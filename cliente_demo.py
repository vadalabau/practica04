"""
Cliente demo para el Sistema de Gesti√≥n de Sat√©lites
Demuestra m√∫ltiples clientes conect√°ndose simult√°neamente
"""

import socket
import json
import threading
import time

def cliente_worker(cliente_id):
    """Funci√≥n que ejecuta un cliente individual"""
    print(f"Cliente {cliente_id} iniciando...")
    
    try:
        # Conectar al servidor
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(('localhost', 12345))
            print(f"Cliente {cliente_id} conectado")
            
            # Registrar sat√©lite
            solicitud = {
                "action": "register_satellite",
                "data": {
                    "nombre": f"Sat√©lite-{cliente_id}",
                    "tipo": "Observaci√≥n",
                    "fecha_lanzamiento": "2024-01-15",
                    "orbita": "LEO",
                    "sensores": [{"nombre": "C√°mara", "tipo": "√ìptico"}]
                }
            }
            
            s.send(json.dumps(solicitud).encode('utf-8'))
            respuesta = json.loads(s.recv(4096).decode('utf-8'))
            print(f"‚úÖ Cliente {cliente_id}: Sat√©lite registrado")
            
            # Consultar sat√©lites
            solicitud = {"action": "query_satellites"}
            s.send(json.dumps(solicitud).encode('utf-8'))
            respuesta = json.loads(s.recv(4096).decode('utf-8'))
            satelites = respuesta.get('data', {}).get('satelites', [])
            print(f"‚úÖ Cliente {cliente_id}: Encontrados {len(satelites)} sat√©lites")
            
            print(f"üîå Cliente {cliente_id} desconectado")
            
    except Exception as e:
        print(f"‚ùå Cliente {cliente_id} error: {e}")

def main():
    """Funci√≥n principal"""
    print("=== Demo: M√∫ltiples Clientes Simult√°neos ===")
    
    # Verificar que el servidor est√© funcionando
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(2)
            s.connect(('localhost', 12345))
            print("‚úÖ Servidor est√° funcionando")
    except:
        print("‚ùå Servidor no est√° disponible")
        print("Ejecuta 'python server/server.py' primero")
        return
    
    print("\nIniciando 3 clientes simult√°neamente...")
    
    # Crear hilos para m√∫ltiples clientes
    hilos = []
    for i in range(3):
        hilo = threading.Thread(target=cliente_worker, args=(i+1,))
        hilo.daemon = True
        hilos.append(hilo)
    
    # Iniciar todos los hilos
    for hilo in hilos:
        hilo.start()
        time.sleep(0.1)
    
    # Esperar a que terminen todos los hilos
    for hilo in hilos:
        hilo.join()
    
    print("\nDemo completado!")

if __name__ == "__main__":
    main()
